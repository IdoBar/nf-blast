// settings to run diamond/blast
  manifest {
    name = 'blast-nf'
    author = 'Ido Bar'
    description = 'Homology search using BLAST or Diamond'
    mainScript = 'blast-nf.nf'
    nextflowVersion = '>=21.04.1'
    version = '0.3.0'
  }

  env {
        BLASTDB = "/scratch/project/adna/tools/ncbi_db"
      }

  params {
        tracedir = "pipeline_info"
        outDir = "${manifest.name}-results"
        query = ""
        db = "${env.BLASTDB}/nt"
        taxDbDir = ""
        taxListFile = "$projectDir/assets/NO_FILE"
        out = ""
        // taxDbDir = "${env.BLASTDB}"
        // chunkSize = "250.KB"
        chunkSize = "500"
        outfmtString = "'6 std'"
        // evalue = "1e-10"
        // targetSeqs = 50
        app = 'blastn'
        blastOpts = '-evalue 1e-10 -max_target_seqs 20'
        dmndOpts = '-e 1e-10 -k 20'
      }


  profiles {
        
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        // singularity.runOptions = "-B ${db_dir}"
    }

    apptainer {
      apptainer {
        enabled = true
        autoMounts = true
        // runOptions = "-B ${db_dir}"
      }
    }

    conda {
        // process.conda = 'blast diamond'
        conda.enabled = true
        conda.useMamba = true
    }
    blastn_tax {
      params {
            db = "${env.BLASTDB}/nt"
            outfmtString = "6 std stitle staxids sscinames scomnames sskingdoms"
            app = 'blastn'
        }
    }
    diamond_tax {
      params {
            db = "${env.BLASTDB}/nr"
            app = "diamond blastp"
            outfmtString = "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore stitle staxids sscinames skingdoms sphylums"
        }
    }
    test {
        params {
            query = "${projectDir}/test/test.fa"
            db = "${projectDir}/test/test_nt"
            out = "test.blastn.nt.outfmt6"
            outDir = "blastn-test"
            chunkSize = "10"
            outfmtString = "6 std"
            app = 'blastn'
        }
    }
    test_tax {
        params {
            query = "${projectDir}/test/test.fa"
            db = "${projectDir}/test/test_nt"
            out = "test.blastn.nt.tax.outfmt6"
            outDir = "blastn-tax-test"
            chunkSize = "10"
            outfmtString = "6 std stitle staxids sscinames scomnames sskingdoms"
            app = 'blastn'
        }
    }
    test_p {
        params {
            query = "${projectDir}/test/test.pep.faa"
            db = "${projectDir}/test/test_nr"
            out = "test.blastp.nr.outfmt6"
            outDir = "blastp-test"
            chunkSize = "10"
            app = 'blastp'
        }
    }
    test_p_tax {
        params {
            query = "${projectDir}/test/test.pep.faa"
            db = "${projectDir}/test/test_nr"
            out = "test.blastp.nr.tax.outfmt6"
            outDir = "blastp-tax-test"
            outfmtString = "6 std stitle staxids sscinames scomnames sskingdoms"
            chunkSize = "10"
            app = 'blastp'
        }
    }
    test_d {
        params {
            query = "${projectDir}/test/test.pep.faa"
            db = "${projectDir}/test/test_nr.dmnd"
            outfmtString = "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore"
            out = "test.diamond_blastp.nr.outfmt6"
            outDir = "diamond-blastp-est"
            chunkSize = "10"
            app = 'diamond blastp'
            diamondOpts = '--fast -e 1e-10 -k 10'
        }
    }
    test_d_tax {
        params {
            query = "${projectDir}/test/test.pep.faa"
            db = "${projectDir}/test/test_nr.dmnd"
            outfmtString = "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore stitle staxids sscinames skingdoms sphylums"
            out = "test.diamond_blastp.nr.tax.outfmt6"
            outDir = "diamond-blastp-tax-test"
            chunkSize = "10"
            app = 'diamond blastp'
            diamondOpts = '--fast -e 1e-10 -k 10'
        }
   }
  }
  process {
        errorStrategy = { task.exitStatus in [143,140,137,104,134,139,271] ? 'retry' : 'finish' }
        maxRetries = 4

        withLabel: 'diamond' {
          cpus = { check_max( 10 + (2* task.attempt), 'cpus' ) }
          memory = { check_max( 24.GB + (8.GB * task.attempt), 'memory' ) }
          time = { check_max( 4.h + (2.h* task.attempt), 'time' ) }
          container = 'buchfink/diamond'
          conda = 'bioconda::diamond'
        }
        withLabel: 'blast' {
          cpus = { check_max( 6 + (2 * task.attempt), 'cpus' ) }
          memory = { check_max( 24.GB + (8.GB * task.attempt), 'memory' ) }
          time = { check_max( 15.h + (5.h * task.attempt), 'time' ) }
          container = 'ncbi/blast:latest'
          conda = 'bioconda::blast'
        }

        withLabel:'sc_medium' {
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 8.GB + (4.GB * task.attempt), 'memory' ) }
          time = { check_max( 6.h + (2.h * task.attempt), 'time' ) }
        }
        
        withName: 'blast' {
          cpus = { check_max( 10 + (2 * task.attempt), 'cpus' ) }
          memory = { check_max( 24.GB + (8.GB * task.attempt), 'memory' ) }
          time = { check_max( 100.h + (50.h * task.attempt), 'time' ) }

        }
        withName: 'diamond_prep_tax_db' {
            time = { check_max( 7.h + (3.h * task.attempt), 'time' ) }
        }

        withName: 'download_tax_db' {
          cpus = { check_max( 4 + (2 * task.attempt), 'cpus' ) }
          memory = { check_max( 12.GB + (4.GB * task.attempt), 'memory' ) }
          time = { check_max( 4.h + (2.h * task.attempt), 'time' ) }
          container = 'docker://andrey01/aria2c:latest'
          conda = 'conda-forge::aria2'
        }

    }

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

//
executor {
  queueSize = 20
  submitRateLimit = '10 sec'
}

timeline {
  enabled = false
  file = "${params.outDir}/${params.tracedir}/${manifest.name}_${params.app}_timeline.html"
}
report {
  enabled = false
  file = "${params.outDir}/${params.tracedir}/${manifest.name}_${params.app}_report.html"
}
trace {
  enabled = false
  file = "${params.outDir}/${params.tracedir}/${manifest.name}_${params.app}_trace.txt"
}
dag {
  enabled = false
  file = ( {nextflow.version.matches('22.04+')} ) ? "${params.outDir}/${params.tracedir}/${manifest.name}_${params.app}_dag.mmd" : "${params.outDir}/${params.tracedir}/${manifest.name}_${params.app}_dag.html"
  //file = "${params.outDir}/${params.tracedir}/${workflow.manifest.name}_${params.app}_dag.html"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

